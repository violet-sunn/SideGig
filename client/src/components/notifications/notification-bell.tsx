import { useState } from 'react';
import { Bell, X, Check, CheckCheck, Trash2, ExternalLink } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuTrigger,
  DropdownMenuLabel,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';
import { ScrollArea } from '@/components/ui/scroll-area';
import { useNotifications } from '@/hooks/useNotifications';
import { formatDistanceToNow } from 'date-fns';
import { ru } from 'date-fns/locale';
import type { Notification } from '@shared/schema';\n\nfunction NotificationItem({ notification, onMarkAsRead, onDelete }: {\n  notification: Notification;\n  onMarkAsRead: (id: string) => void;\n  onDelete: (id: string) => void;\n}) {\n  const handleClick = () => {\n    if (!notification.isRead) {\n      onMarkAsRead(notification.id);\n    }\n    \n    // Navigate to action URL if provided\n    if (notification.actionUrl) {\n      window.location.href = notification.actionUrl;\n    }\n  };\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'new_bid':\n        return 'üíº';\n      case 'bid_accepted':\n        return '‚úÖ';\n      case 'bid_rejected':\n        return '‚ùå';\n      case 'new_message':\n        return 'üí¨';\n      case 'task_completed':\n        return 'üéâ';\n      case 'task_assigned':\n        return 'üìã';\n      case 'payment_received':\n        return 'üí∞';\n      case 'review_received':\n        return '‚≠ê';\n      case 'dispute_created':\n        return '‚ö†Ô∏è';\n      case 'dispute_resolved':\n        return '‚úÖ';\n      case 'counter_offer':\n        return 'üîÑ';\n      default:\n        return 'üîî';\n    }\n  };\n\n  return (\n    <div\n      className={`p-3 border-b hover:bg-gray-50 cursor-pointer transition-colors ${\n        !notification.isRead ? 'bg-blue-50 border-l-4 border-l-blue-500' : ''\n      }`}\n      onClick={handleClick}\n    >\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-start space-x-3 flex-1\">\n          <span className=\"text-lg flex-shrink-0 mt-0.5\">\n            {getNotificationIcon(notification.type)}\n          </span>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between mb-1\">\n              <p className={`text-sm font-medium truncate ${\n                !notification.isRead ? 'text-gray-900' : 'text-gray-700'\n              }`}>\n                {notification.title}\n              </p>\n              <div className=\"flex items-center space-x-1 ml-2\">\n                {notification.actionUrl && (\n                  <ExternalLink className=\"h-3 w-3 text-gray-400\" />\n                )}\n                {!notification.isRead && (\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                )}\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-600 mb-2 line-clamp-2\">\n              {notification.message}\n            </p>\n            <p className=\"text-xs text-gray-500\">\n              {formatDistanceToNow(new Date(notification.createdAt), {\n                addSuffix: true,\n                locale: ru\n              })}\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-1 ml-2\">\n          {!notification.isRead && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onMarkAsRead(notification.id);\n              }}\n              className=\"h-6 w-6 p-0 hover:bg-blue-100\"\n            >\n              <Check className=\"h-3 w-3 text-blue-600\" />\n            </Button>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onDelete(notification.id);\n            }}\n            className=\"h-6 w-6 p-0 hover:bg-red-100\"\n          >\n            <X className=\"h-3 w-3 text-red-600\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function NotificationBell() {\n  const {\n    notifications,\n    unreadCount,\n    isLoading,\n    isConnected,\n    markNotificationAsRead,\n    markAllNotificationsAsRead,\n    deleteNotification,\n    isMarkingAllAsRead,\n  } = useNotifications();\n  \n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-2 -right-2 h-5 w-5 p-0 flex items-center justify-center text-xs\"\n            >\n              {unreadCount > 99 ? '99+' : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-96\">\n        <div className=\"flex items-center justify-between px-4 py-2\">\n          <DropdownMenuLabel className=\"p-0 font-semibold\">\n            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n            {isConnected && (\n              <span className=\"ml-2 text-xs text-green-600 font-normal\">\n                ‚Ä¢ –í —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n              </span>\n            )}\n          </DropdownMenuLabel>\n          \n          {notifications.length > 0 && (\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={markAllNotificationsAsRead}\n                disabled={isMarkingAllAsRead || unreadCount === 0}\n                className=\"h-7 px-2 text-xs\"\n              >\n                <CheckCheck className=\"h-3 w-3 mr-1\" />\n                –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ\n              </Button>\n            </div>\n          )}\n        </div>\n        \n        <DropdownMenuSeparator />\n        \n        <ScrollArea className=\"h-96\">\n          {isLoading ? (\n            <div className=\"p-4 text-center text-gray-500\">\n              <div className=\"animate-spin w-6 h-6 border-2 border-gray-300 border-t-gray-600 rounded-full mx-auto mb-2\"></div>\n              –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...\n            </div>\n          ) : notifications.length === 0 ? (\n            <div className=\"p-6 text-center text-gray-500\">\n              <Bell className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\n              <p className=\"text-sm font-medium mb-1\">–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>\n              <p className=\"text-xs\">–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö, —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</p>\n            </div>\n          ) : (\n            <div>\n              {notifications.map((notification) => (\n                <NotificationItem\n                  key={notification.id}\n                  notification={notification}\n                  onMarkAsRead={markNotificationAsRead}\n                  onDelete={deleteNotification}\n                />\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n        \n        {notifications.length > 0 && (\n          <>\n            <DropdownMenuSeparator />\n            <div className=\"p-2\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"w-full text-xs text-gray-600\"\n                onClick={() => {\n                  setIsOpen(false);\n                  window.location.href = '/notifications';\n                }}\n              >\n                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n              </Button>\n            </div>\n          </>\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}